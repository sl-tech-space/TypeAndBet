# cron専用Dockerfile（本番環境最適化版）
FROM python:3.11-slim

WORKDIR /app

# セキュリティ設定
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PYTHONPATH=/app \
    LANG=C.UTF-8 \
    LC_ALL=C.UTF-8 \
    TZ=Asia/Tokyo \
    MECABRC=/etc/mecabrc

# システム依存関係のインストール
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    libpq5 \
    cron \
    gosu \
    gettext-base \
    tzdata \
    gzip \
    mecab \
    mecab-ipadic-utf8 \
    libmecab-dev \
    procps \
    && ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && \
    echo $TZ > /etc/timezone \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# 仮想環境の作成
RUN python -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# 依存関係のインストール
COPY requirements.txt .
RUN pip install --no-cache-dir --upgrade pip && \
    pip install --no-cache-dir -r requirements.txt

# 非rootユーザー（django）の作成
RUN groupadd -r django && \
    useradd -r -g django django

# MeCab設定ファイルの作成
RUN echo "dicdir = /var/lib/mecab/dic/ipadic-utf8" > /etc/mecabrc && \
    echo "userdic =" >> /etc/mecabrc && \
    echo "input-buffer-size = 8192" >> /etc/mecabrc && \
    echo "node-format = %m\t%f[7]\t%f[6]\t%F-[0,1,2,3]\t%f[4]\t%f[5]\n" >> /etc/mecabrc && \
    echo "eos-format = EOS\n" >> /etc/mecabrc && \
    echo "unk-format = %m\t%m\t%m\t%F-[0,1,2,3]\t%m\t%m\n" >> /etc/mecabrc && \
    # /usr/local/etcディレクトリを作成してからシンボリックリンクを作成
    mkdir -p /usr/local/etc && \
    ln -sf /etc/mecabrc /usr/local/etc/mecabrc

# 必要なディレクトリの作成と権限設定
RUN mkdir -p /app/logs /app/media /app/tmp /var/log /var/run /shared && \
    chown -R django:django /app && \
    chown -R django:django /shared && \
    chmod 755 /app && \
    chmod 755 /app/logs && \
    chmod 755 /app/media && \
    chmod 700 /app/tmp && \
    chmod 755 /var/log && \
    chmod 755 /var/run && \
    chmod 755 /shared && \
    # cron用のディレクトリと権限設定
    mkdir -p /var/spool/cron/crontabs && \
    chmod 755 /var/spool/cron && \
    chmod 755 /var/spool/cron/crontabs && \
    # cronログファイルを作成
    touch /var/log/cron.log && \
    chmod 644 /var/log/cron.log

# アプリケーションコードのコピー（djangoユーザー所有）
COPY --chown=django:django . .

# cronジョブ設定スクリプトに実行権限を付与
RUN chmod +x setup_cron_jobs_prod.sh

# cron設定ファイル用のディレクトリを作成
RUN mkdir -p /etc/cron.d && \
    chmod 755 /etc/cron.d

# 起動スクリプトをコピー
COPY start-cron.sh /usr/local/bin/start-cron.sh
RUN chmod +x /usr/local/bin/start-cron.sh

# rootユーザーのまま実行（cronプロセス用）
CMD ["/usr/local/bin/start-cron.sh"]
