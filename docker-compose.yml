services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: tab-frontend
    ports:
      - "${FRONTEND_PORT}:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - TZ=${TIMEZONE}
      - NEXTAUTH_URL=${NEXTAUTH_URL}
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
    depends_on:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:${FRONTEND_PORT} || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: tab-backend
    ports:
      - "${BACKEND_PORT}:8000"
    volumes:
      - ./backend:/app
    environment:
      - DJANGO_ENV=development
      - DEBUG=True
      - FRONTEND_PORT=${FRONTEND_PORT}
      - SECRET_KEY=${SECRET_KEY}
      - TZ=${TIMEZONE}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_INTERNAL_PORT}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - JWT_SECRET=${JWT_SECRET}
      - PYTHONIOENCODING=${PYTHONIOENCODING}
      - DJANGO_ALLOWED_HOSTS=${DJANGO_ALLOWED_HOSTS}
      - DJANGO_CORS_ALLOWED_ORIGINS=${DJANGO_CORS_ALLOWED_ORIGINS}
      - DJANGO_CSRF_TRUSTED_ORIGINS=${DJANGO_CSRF_TRUSTED_ORIGINS}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - GEMINI_MODEL=${GEMINI_MODEL}
      - EMAIL_HOST=${EMAIL_HOST}
      - EMAIL_PORT=${EMAIL_PORT}
      - EMAIL_USE_TLS=${EMAIL_USE_TLS}
      - EMAIL_HOST_USER=${EMAIL_HOST_USER}
      - EMAIL_HOST_PASSWORD=${EMAIL_HOST_PASSWORD}
      - DEFAULT_FROM_EMAIL=${DEFAULT_FROM_EMAIL}
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:${BACKEND_PORT} || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
  # cronジョブ専用サービス
  cron-jobs:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: tab-cron-jobs
    volumes:
      - ./backend:/app
    environment:
      - DJANGO_ENV=development
      - DEBUG=True
      - SECRET_KEY=${SECRET_KEY}
      - TZ=${TIMEZONE}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_INTERNAL_PORT}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - JWT_SECRET=${JWT_SECRET}
      - PYTHONIOENCODING=${PYTHONIOENCODING}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - GEMINI_MODEL=${GEMINI_MODEL}
      - EMAIL_HOST=${EMAIL_HOST}
      - EMAIL_PORT=${EMAIL_PORT}
      - EMAIL_USE_TLS=${EMAIL_USE_TLS}
      - EMAIL_HOST_USER=${EMAIL_HOST_USER}
      - EMAIL_HOST_PASSWORD=${EMAIL_HOST_PASSWORD}
      - DEFAULT_FROM_EMAIL=${DEFAULT_FROM_EMAIL}
    depends_on:
      db:
        condition: service_healthy
    networks:
      - default
    command: ["/bin/bash", "-c", "./setup_cron_jobs.sh"]

  db:
    image: postgres:15-alpine
    container_name: tab-db
    volumes:
      - tab_postgres_data:/var/lib/postgresql/data
    ports:
      - "${DB_EXTERNAL_PORT}:${DB_INTERNAL_PORT}"
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

volumes:
  tab_postgres_data:

networks:
  ${NETWORK}:
    name: ${NETWORK}
