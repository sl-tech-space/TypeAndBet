# レート制限設定（ステージング環境用）
limit_req_zone $binary_remote_addr zone=api:10m rate=20r/s;
limit_req_zone $binary_remote_addr zone=general:10m rate=60r/s;
limit_req_zone $binary_remote_addr zone=login:10m rate=10r/m;

# 接続制限
limit_conn_zone $binary_remote_addr zone=conn_limit:10m;

# アップグレード設定
map $http_upgrade $connection_upgrade {
    default upgrade;
    ''      close;
}

upstream frontend_upstream {
    server $FRONTEND;
}

upstream backend_upstream {
    server $BACKEND;
}

# Gzip圧縮設定
gzip on;
gzip_comp_level 5;
gzip_min_length 256;
gzip_proxied any;
gzip_vary on;
gzip_types
    application/atom+xml
    application/javascript
    application/json
    application/ld+json
    application/manifest+json
    application/rss+xml
    application/vnd.geo+json
    application/vnd.ms-fontobject
    application/x-font-ttf
    application/x-web-app-manifest+json
    application/xhtml+xml
    application/xml
    font/opentype
    image/bmp
    image/svg+xml
    image/x-icon
    text/cache-manifest
    text/css
    text/plain
    text/vcard
    text/vnd.rim.location.xloc
    text/vtt
    text/x-component
    text/x-cross-domain-policy;

# HTTP設定（ステージング環境）
server {
    listen ${HTTP_PORT};
    server_name ${SERVER_NAME};

    # レート制限適用（ステージング環境は緩め）
    limit_req zone=general burst=30 nodelay;
    limit_conn conn_limit 15;

    # セキュリティヘッダー（HTTP環境用）
    add_header X-Content-Type-Options nosniff always;
    add_header X-Frame-Options SAMEORIGIN always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Permissions-Policy "geolocation=(), microphone=(), camera=(), fullscreen=(), payment=()" always;

    # エラーページはフロントエンドで処理
    error_page 400 401 403 404 405 408 413 414 415 429 500 502 503 504 @error_handler;

    # エラーハンドリング（フロントエンドに転送）
    location @error_handler {
        proxy_pass http://frontend_upstream;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto http;
        proxy_set_header X-Forwarded-Host $server_name;
        proxy_set_header X-Original-URI $request_uri;
        proxy_set_header X-Error-Status $status;

        # タイムアウト設定
        proxy_read_timeout 90;
        proxy_connect_timeout 90;
        proxy_send_timeout 90;
    }

    # 静的ファイル
    location /_next/static/ {
        proxy_pass http://frontend_upstream/_next/static;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # 静的ファイル
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {

        if ($request_uri ~ ^/_next/static/) {
            break;
        }

        proxy_pass http://frontend_upstream;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # キャッシュ設定（ステージング環境は短め）
        expires 1d;
        add_header Cache-Control "public, must-revalidate";
        add_header Vary "Accept-Encoding";
    }

    # APIエンドポイント（レート制限強化）
    location /api/ {
        # レート制限（API用）
        limit_req zone=api burst=20 nodelay;

        # ログイン関連はより厳しい制限
        location ~ ^/api/(auth|login|signup) {
            limit_req zone=login burst=5 nodelay;
        }

        proxy_pass http://frontend_upstream;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto http;
        proxy_set_header X-Forwarded-Host $server_name;
        proxy_cache_bypass $http_upgrade;

        # タイムアウト設定
        proxy_read_timeout 90;
        proxy_connect_timeout 90;
        proxy_send_timeout 90;

        # Streaming SSR 対応
        proxy_buffering off;
        proxy_cache off;
        proxy_set_header Connection '';
        chunked_transfer_encoding on;

        # CORS設定（ステージング環境用）
        add_header 'Access-Control-Allow-Origin' '*' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE' always;
        add_header 'Access-Control-Allow-Headers' 'Content-Type, Authorization, X-Requested-With' always;
        add_header 'Access-Control-Allow-Credentials' 'true' always;
        add_header 'Access-Control-Max-Age' '86400' always;

        # OPTIONSリクエストの処理
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE' always;
            add_header 'Access-Control-Allow-Headers' 'Content-Type, Authorization, X-Requested-With' always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;
            add_header 'Access-Control-Max-Age' '86400' always;
            add_header 'Content-Type' 'text/plain charset=UTF-8';
            add_header 'Content-Length' '0';
            return 204;
        }
    }

    # GraphQLエンドポイント（レート制限強化）
    location /graphql/ {
        # レート制限（GraphQL用）
        limit_req zone=api burst=25 nodelay;

        proxy_pass http://backend_upstream;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto http;
        proxy_set_header X-Forwarded-Host $server_name;

        # タイムアウト設定
        proxy_read_timeout 120;
        proxy_connect_timeout 90;
        proxy_send_timeout 120;
    }

    # ヘルスチェック用エンドポイント
    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }

    # フロントエンドのヘルスチェック確認用
    location /frontend-health {
        access_log off;
        proxy_pass http://frontend_upstream/health;
        proxy_set_header Host $host;
    }

    # バックエンドのヘルスチェック確認用
    location /backend-health {
        access_log off;
        proxy_pass http://backend_upstream/health;
        proxy_set_header Host $host;
    }

    # ロボットファイル（ステージング環境はインデックス許可）
    location /robots.txt {
        return 200 "User-agent: *\nAllow: /\n";
        add_header Content-Type text/plain;
    }

    # ステージング環境用の情報表示
    location /staging-info {
        access_log off;
        return 200 "Staging Environment\nServer: ${SERVER_NAME}\nPort: ${HTTP_PORT}\nFrontend: frontend:3000\nBackend: backend:8000\n";
        add_header Content-Type text/plain;
    }

    # メインのフロントエンド
    location / {
        proxy_pass http://frontend_upstream;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto http;
        proxy_set_header X-Forwarded-Host $server_name;
        proxy_cache_bypass $http_upgrade;

        # タイムアウト設定
        proxy_read_timeout 90;
        proxy_connect_timeout 90;
        proxy_send_timeout 90;

        # Streaming SSR 対応
        proxy_buffering off;
        proxy_cache off;
        proxy_set_header Connection '';
        chunked_transfer_encoding on;

        # セキュリティヘッダー
        add_header X-Content-Type-Options nosniff always;
        add_header X-Frame-Options SAMEORIGIN always;
    }
}
